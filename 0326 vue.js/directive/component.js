//component.js

let component = {

    name : '',      // 컴포넌트 이름 : 고유의 이름을 구분하고 싶으면 사용

    
    template : ``,  // View : ``(빽틱) = 줄바꿈을 사용하기 위해서

    
    data(){},       // Data : CRUD 사용가능  |  데이터의 실제 값 (프로퍼티) : 

    
    computed : {},  // Data : READ 만 가능  |  컴포넌트가 가지고 있는 데이터 | 자동계산. 따로 연산하지 않아도 알아서 데이터가 변경됨

    
    methods : {},   // Code : 기능  |  컴포넌트가 실행해야 할 함수가 전부 들어감 (메서드에 등록되지 않는 함수를 인지하지 못함) 
                    // 외부선언 함수를 사용하려면 한번 감싸줘야함

    
    watch : {},     // Data( data(){} , computed )를 감시 -> 연속행위를 정의
    
    
    components : {}, // 자식 컴포턴트들 추가
                    // 루트 컴포넌트 내부에 정의 되어지지 않는 함수는 사용하지 못함.


    created : {}, // 인스턴스가 작성된 후 동기적으로 호출 
                 // mounted보다 먼저 호출 1.부모 2.자식 순으로
                 // 데이터 초기화 선언역할 외부에서 부여받은 기본값의 변경이 필요한 경우.


    mounted : {}, // 인스턴스가 마운트된 후 호출
                  // created 다음으로 호출 .  1.자식 2.부모 순으로 

    /* 
    렌더링 : html로 입력받아 해석해서 표준 출력 장치(모니터)로 출력 해 줍니다. (화면에 뿌려주는 역할)

    바인딩 : 컴퓨터 프로그래밍에서 각종 값들이 확정되어 더 이상 변경할 수 없는 구속(Bind) 상태가 되는 것.

    
    
    
    */
                
};

  function 함수이름 (매개변수){

 }